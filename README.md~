# arestcli
REST client using Asio (based on Casablanca)

This is a port of Mincrosoft REST-SDK (aka Casablanca) using Asio library instead of boost::Asio and also forcing its usage on Windows.

## WIP: 
Only some tests on Windows done, Websockets, compression and SLL disabled and not yet tested. Only a VisualStudio 2022 provided!!!

## Plans: 
Currently proprietary continuations library is used. I will try to remove this and use C++20 coroutines support in Asio instead.
The std::wstring is used in the API at the moment. This is irritating, will try to switch to narrow strings (it's UTF8 everywhere, innnit?)

## Usage:

```cpp
#include <http_client.h>
#include <cpprest/json.h>

using namespace web;
using namespace web::http;
using namespace web::json;


int main()
{
    http::client::http_client clientRestTest(U("http://httpbin.org"));
    web::json::value client_resp;

    try
    {
        auto response = clientRestTest.request(methods::GET, uri_builder(U("/anything")).to_string()).get();
        
        std::cout << "response status code:" << response.status_code() << std::endl;

        if (response.status_code() == status_codes::OK)
        {
            client_resp = response.extract_json().get();
        }
        else
        {
            client_resp = web::json::value();
        }
    }
    catch (web::http::http_exception& exc)
    {
        std::cout << "exc=" << exc.what() << std::endl;
        return -1;
    }
    catch (web::json::json_exception& exc)
    {
        std::cout << "exc=" << exc.what() << std::endl;
        return -1;
    }
    catch (...)
    {
        std::cout << "unknown exc!!!" << std::endl;
        return -1;
    }

    // show:
    std::wstring respStrg = client_resp.serialize();
    std::string s2(respStrg.begin(), respStrg.end());
    std::cout << " -- response:" << s2 << "\n\n";
}
```

